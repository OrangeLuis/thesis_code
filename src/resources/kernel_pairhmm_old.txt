extern "C"
#include <stdio.h>
#include <math.h>
__global__ void subComputation(char *reads, char *quals, char *ins, char *dels, char *gcps, char *alleles, float *match, float *insertion, float *deletion, float *out, int m, int n, float beta, float epsilon) {
    //Thread index and components
    unsigned int x = threadIdx.x + blockIdx.x * blockDim.x;
    int a = threadIdx.x;
    int b = blockIdx.x;
    int c = blockDim.x;
    //Read index and First value of the matrix index
    int x_index = x * 2;
    int f_index = a + b * n * m;
    //Set up proposition
    bool first_column = (x % c == 0 || x == 0); 
    //Inizialize first element of each column of the matrix
    match[f_index] = 0;
    insertion[f_index] = 0;
    if (first_column) deletion[f_index] = (float) 1 / n;
    else deletion[f_index] = 0; 
    //Loop flowing through the column
    for(int i = -a + 1; i < n; i++) {
        //Allele index
        int a_index = b * (c * 2) + i * 2;
        //While i <= 0 the thread just do synchronization with other threads in the block
        if(i > 0) {
            //If the read is valid (not 'X'), do the calculation, otherwise everything is set to zero
            if (reads[x_index] != 'X') {
                //If first column, set up initial values
                if(first_column) {
                    //Column index
                    int c_index = m * i + b * n * m;
                    //Setting up of values
                    match[c_index] = 0;
                    insertion[c_index] = 0;
                    deletion[c_index] = (float)1/n;
                }
                //Otherwise do the following calculation
                else {
                    //Indices for previous elements
                    int ij_index = i * c + a + b * n * m;
                    int previ_index = (i - 1) * c + a + b * n * m;
                    int prevj_index = i * c + (a - 1) + b * n * m;
                    int previj_index = (i - 1) * c + (a - 1) + b * n * m;
                    //Prior calculation
                    float pij = 0;
                    //Calculation of quality values 
                    float quals_x = (1 - pow(10, -((int) quals[x_index] - 33)/10));
                    float ins_x = (1 - pow(10, -(((int) ins[x_index] - 33)/10)));
                    float dels_x = (1 - pow(10, -(((int) dels[x_index] - 33)/10)));
                    float gcps_x = (1 - pow(10, -(((int) gcps[x_index] - 33)/10)));
                    if(reads[x_index] == alleles[a_index]) {
                            pij = quals_x / 3;
                        }
                        else {
                            pij = 1 - quals_x;
                        }                  
                    match[ij_index] = pij * (ins_x * match[previj_index] + beta * insertion[previj_index] + beta * deletion[previj_index]);
                    insertion[ij_index] = dels_x * match[previ_index] + epsilon * insertion[previ_index];
                    deletion[ij_index] = gcps_x * match[prevj_index] + epsilon * deletion[prevj_index];
                }
            }
        }
        //Synchronize threads of the block
        __syncthreads();
    }
    //Output index
    int o_index = (n - 1) * c + a + b * n * m;
    //Write output
    out[x] = match[o_index] + insertion[o_index];
}