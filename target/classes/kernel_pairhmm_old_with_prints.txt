extern "C"

#include <stdio.h>
#include <math.h>

__global__ void subComputation(char *reads,
                               char *quals,
                               char *ins,
                               char *dels,
                               char *gcps,
                               char *alleles,
                               float *prior,
                               float *match,
                               float *insertion,
                               float *deletion,
                               float *out,
                               int samples,
                               int m,
                               int n,
                               float beta,
                               float epsilon,
                               int print)
                               {

    unsigned int x = threadIdx.x + blockIdx.x * blockDim.x;

    int a = threadIdx.x;
    int b = blockIdx.x;
    int c = blockDim.x;
    
    //int m2 = m * 2;
    //int n2 = n * 2;
    int x_index = x * 2;

    //Set up proposition
    bool flag = (x == print);
    bool first_column = x % c == 0 || x == 0; 
    // && (i >= 0 && i < n / 2));

    //Inizialize first element of each column to zero
    int f_index = a + b * n * m;

    prior[f_index] = 0;
    match[f_index] = 0;
    insertion[f_index] = 0;

    if (first_column) deletion[f_index] = (float) 1 / n;
    else deletion[f_index] = 0;

    if (flag) printf ("X = %d -> P: %f, M: %f, I: %f, D: %f (%d)\n", x, prior[f_index], match[f_index], insertion[f_index], deletion[f_index], f_index);


    

    //For each haplotype loop, it goes along the columns of the matrix
    for(int i = -a + 1; i < n; i++)
    {
        //Calculate aindex and ijindex for assignment
        int a_index = b * (c * 2) + i * 2;

        if (i == 0)
        {
            //if (flag) printf ("X = %d -> i: %d, R: %c (%d), A: %c (%d), Q: %c, I: %c, D: %c, G: %c\n", x, i, reads[x_index], x_index, alleles[a_index], a_index,
            //    quals[x_index], ins[x_index], dels[x_index], gcps[x_index]);

        }
        
        //While i < 0, do not do anything
        if(i > 0)
        {

            //Print allele base if i >= 0 and i < 10
            //if (flag) printf ("X = %d -> i: %d, R: %c (%d), A: %c (%d), Q: %c, I: %c, D: %c, G: %c\n", x, i, reads[x_index], x_index, alleles[a_index], a_index,
            //    quals[x_index], ins[x_index], dels[x_index], gcps[x_index]);

            //If x is not equal to X thread must execute the calculus
            if (reads[x_index] != 'X')
            {
                //bool condition = (x % c == 0 || x == 0);
                
                //If x is a thead corresponding to the first column of a matrix, inizialize the values
                if(first_column) {

                    //Calculate column index for assignment
                    int c_index = m * i + b * n * m;
                    
                    prior[c_index] = 0;
                    match[c_index] = 0;
                    insertion[c_index] = 0;
                    deletion[c_index] = (float)1/n;


                    //Print of inizialized values only for loop index 1 of thread 0
                    if (flag) printf ("X = %d -> P: %f, M: %f, I: %f, D: %f (%d)\n", x, prior[c_index], match[c_index], insertion[c_index], deletion[c_index], c_index);
                }
                //Else, for any other loop index, calculate the values
                else 
                {
                    //If/Else to set the value of prior matrix
                    int ij_index = i * c + a + b * n * m;
                    int previ_index = (i - 1) * c + a + b * n * m;
                    int prevj_index = i * c + (a - 1) + b * n * m;
                    int previj_index = (i - 1) * c + (a - 1) + b * n * m;

                    float quals_x = (1 - pow(10, -((int) quals[x_index] - 33)/10));
                    
                    if(reads[x_index] == alleles[a_index]){
                            
                            prior[ij_index] = quals_x / 3;

                        }
                        else
                        {
    
                            prior[ij_index] = 1 - quals_x;

                        }

                        

                        //Print indexes
                        //if (flag) printf ("X = %d -> IJ: %d, PIJ: %d, PI: %d, PJ %d\n", x, ij_index, previj_index, previ_index, prevj_index);


                        float ins_x = (1 - pow(10, -(((int) ins[x_index] - 33)/10)));
                        float dels_x = (1 - pow(10, -(((int) dels[x_index] - 33)/10)));
                        float gcps_x = (1 - pow(10, -(((int) gcps[x_index] - 33)/10)));

                        //if (flag) printf ("X = %d -> QSQ: %f, QSI: %f, QSD: %f, QSG: %f (%d)\n", x, quals_x, ins_x, dels_x, gcps_x, x_index);

                        float pij = prior[ij_index];
                        float mij = match[previj_index];
                        float iij = insertion[previj_index];
                        float dij = deletion[previj_index];
                        float mi = match[previ_index];
                        float ii = insertion[previ_index];
                        float mj = match[prevj_index];
                        float dj = deletion[prevj_index];

                        if (flag) printf("X = %d -> PIJ: %f, MIJ: %f, IIJ: %f, DIJ: %f, MI: %f, II: %f, MJ: %f, DJ: %f \n", x, pij, mij, iij, dij, mi, ii, mj, dj);
                    
                        match[ij_index] = pij * (ins_x * mij + beta * iij + beta * dij);

                        insertion[ij_index] = dels_x * mi + epsilon * ii;

                        deletion[ij_index] = gcps_x * mj + epsilon * dj;

                        if (flag) printf ("X = %d -> P: %f, M: %f, I: %f, D: %f (%d)\n", x, prior[ij_index], match[ij_index], insertion[ij_index], deletion[ij_index], ij_index);

                    //Check if the thread 31 arrive to this point of the loop index 1
                    /*
                    if (x == 31 && i == 1) printf ("inside else modulo \n thread %d \n match di %d, %f \n insertion di %d, %f \n deletion di %d, %.6f                                      \n", a,
                                        (i * c + a + b * n * m),
                                        match[i * c + a + b * n * m],
                                        i * c + a + b * n * m,
                                        insertion[i * c + a + b * n * m],
                                        i * c + a + b * n * m,
                                        deletion[i * c + a + b * n * m]);
                                        */
                }

            }

        }

        //Check if synchthreads works without errors
        __syncthreads();

    }
    int o_index = (n - 1) * c + a + b * n * m;
    //Write out result after the loop, the out result is the sum of last value of the column of both match and insertion matrix
    out[x] = match[o_index] + insertion[o_index];
}