extern "C"

#include <stdio.h>
#include <math.h>

__global__ void subComputation( char *reads, 
                                char *quals, 
                                char *ins, 
                                char *dels, 
                                char *gcps, 
                                char *alleles, 
                                float *prior,   
                                float *match,   
                                float *insertion, 
                                float *deletion,
                                float *out, 
                                float *nrb,
                                float *nab,
                                float *mnrb,
                                float *mnab,
                                float beta, 
                                float epsilon) 
                               {
    //Definition of thread variables                           
    unsigned int x = threadIdx.x + blockIdx.x * blockDim.x;
    
    int a = threadIdx.x; 
    int b = blockIdx.x;
    int c = blockDim.x;

    //Print x, thread id, block id, block dim
    if (x == 0 or x == 288) printf ("x : %d a : %d b : %d c : %d\n", x, a, b, c);

    int readLength = 0;
    int haplotypeLength = 0;

    //Caluculate rindex, aindex, readLength and haplotypeLength
    int rindex = 0;
    int aindex = 0;
    
    int flag = 1;
    
    int dataSize1 = sizeof(nab)/sizeof(nab[0]);
    
    int x_1 = x;
    int lba = 0;
    int uba = 0;
    
    for (int i = 0; i < dataSize1; i++){
        uba += nab[i];
        for (int j = lba; j < uba; j++) {
            
            if (x_1 >= nrb[i] * mnrb[i]){
                aindex += mnab[i];
                x_1 -= nrb[i] * mnrb[i];
            }
            else{
                haplotypeLength = mnab[i];
                readLength = mnrb[i];
                rindex += x_1;
                flag = 0;
                break;
            }
            
        }
        if (flag){
        rindex += nrb[i] * mnrb[i];
        lba = uba;
        }
        else{
            break;
        }
    }
    
    //Print rindex aindex
    if (x == 0 or x == 288) printf ("rindex : %d aindex : %d\n", rindex, aindex);

    //Print paddedReadLength and paddedaHaplotypeLength
    if (x == 0 or x == 288) printf ("paddedReadLength : %dpaddedHaplotypeLength : %d\n", readLength, haplotypeLength);

    //Inizialize first element of each column to zero
    //Calculate column index for assignment
    int first_index = a + b * haplotypeLength * readLength;
    match[first_index] = 0;
    insertion[first_index] = 0;
    deletion[first_index] = 0;
    
    //For each haplotype loop, it goes along the columns of the matrix
    for(int i = -a + 1; i < haplotypeLength; i++)
    {
               
        //While i < 0, do not do anything but synchronize threads
        if(i >= 0)
        {

            //Calculate x index for assignment
            int xindex = i * c + a + b * haplotypeLength * readLength;

            if (reads[rindex] != 'X')
            {
                               
                //If/Else to set the value of prior matrix
                if(reads[rindex] == alleles[aindex + i])
                {
                    
                    prior[xindex] = (1 - pow(10, -(((int) quals[rindex] - 33)/10)))/3;
                
                }
                else
                {
                    
                    prior[xindex] = 1 - (1 - pow(10, -(((int) quals[rindex] - 33)/10)));
                }
                    
                //If x is a thead corresponding to the first column of a matrix, inizialize the values 
                if(rindex % c == 0 || x == 0) 
                {
                    //Calculate column index for assignment
                    int column_index = readLength * i + b * haplotypeLength * readLength;
                
                    match[column_index] = 0;
                    insertion[column_index] = 0;
                    deletion[column_index] = (float)1/haplotypeLength;
                
                //Else, for any other loop index, calculate the values
                }
                else
                {
                    //Calculate previous indexes for assignment
                    int previjindex = (i - 1) * c + (a - 1) + b * haplotypeLength * readLength;
                    int previindex = (i - 1) * c + a + b * haplotypeLength * readLength;
                    int prevjindex = i * c + (a - 1) + b * haplotypeLength * readLength;

                    float ins_x = (1 - pow(10, -(((int) ins[x] - 33)/10)));
                    float dels_x = (1 - pow(10, -(((int) dels[x] - 33)/10)));
                    float gcps_x = (1 - pow(10, -(((int) gcps[x] - 33)/10)));
                
                    match[xindex] = prior[xindex] * (ins_x * match[previjindex] + beta * insertion[previjindex] + beta * deletion[previjindex]);
            
                    insertion[xindex] = dels_x * match[previindex] + epsilon * insertion[previindex];
            
                    deletion[xindex] = gcps_x * match[prevjindex] + epsilon * insertion[prevjindex];
                }
                
            }
            else
            {
            match[xindex] = 0;
            insertion[xindex] = 0;
            deletion[xindex] = 0;
            }
        }
        
        __syncthreads();
            
    }
    
    int oindex = (haplotypeLength - 1) * c + a + b * haplotypeLength * readLength;
    //Write out result after the loop, the out result is the sum of last value of the column of both match and insertion matrix
    out[x] = match[oindex] + insertion[oindex];
            
}